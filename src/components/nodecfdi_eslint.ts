import { awscdk, Component, TextFile, typescript } from 'projen';
import type nodecfdiConfig from '@nodecfdi/eslint-config';
import { NodecfdiSettings } from '@nodecfdi/eslint-config/types';

export interface NodeCfdiEslintOptions {
  options?: Omit<NodecfdiSettings, 'projectService'> & {
    projectService?: Exclude<NodecfdiSettings['projectService'], boolean>;
  };
  configBlocksToMerge?: Parameters<ReturnType<typeof nodecfdiConfig>['defineConfig']>;
}

export class NodeCfdiEslint extends Component {
  private readonly configFilePath = 'eslint.config.js';

  private readonly isCdkProject: boolean;

  private readonly options: NodeCfdiEslintOptions & { options: NodecfdiSettings };

  public constructor(
    project: typescript.TypeScriptProject | awscdk.AwsCdkTypeScriptApp,
    options: NodeCfdiEslintOptions = {},
  ) {
    super(project);

    this.isCdkProject = project instanceof awscdk.AwsCdkTypeScriptApp;
    this.options = {
      ...options,
      options: {
        vitest: true,
        n: true,
        ...options.options,
        sonarjs: true,
        ignores: {
          ...(options.options?.ignores ?? {}),
          additional: [...(options.options?.ignores?.additional ?? []), 'vitest.config.ts'],
        },
        projectService: {
          ...(options.options?.projectService ?? {}),
          allowDefaultProject: ['*.js', ...(options.options?.projectService?.allowDefaultProject ?? [])],
          defaultProject: project.tsconfigDev.file.path,
        },
      },
    };

    project.addDevDeps('eslint@^9.22', '@nodecfdi/eslint-config@^3');

    this.addEslintCommand();
    this.synthesizeConfig();

    project.npmignore?.exclude('eslint.config.js');
  }

  private addEslintCommand(): void {
    const eslintTask = this.project.tasks.tryFind('lint');
    if (!eslintTask) {
      this.project.addTask('lint', {
        exec: 'eslint . --fix',
        receiveArgs: true,
      });
    }

    const eslintCheckTask = this.project.tasks.tryFind('lint:check');
    if (!eslintCheckTask) {
      this.project.addTask('lint:check', {
        exec: 'eslint .',
        receiveArgs: true,
      });
    }
  }

  private synthesizeConfig(): void {
    this.project.tryRemoveFile(this.configFilePath);

    new TextFile(this, this.configFilePath, {
      lines: this.renderConfig(),
    });
  }

  private renderConfig(): string[] {
    return [
      '// ~~ Generated by projen. To modify, edit .projenrc.ts and run "pnpm dlx projen".',
      "import nodecfdiConfig from '@nodecfdi/eslint-config';",
      '',
      `const config = nodecfdiConfig(import.meta.dirname, ${JSON.stringify(this.options.options, undefined, 2)});`,
      '',
      ...this.renderConfigBlocksToMerge(),
      '',
    ];
  }

  private renderConfigBlocksToMerge(): string[] {
    const lines: string[] = [];
    lines.push('export default config.defineConfig(');

    if (this.options.configBlocksToMerge) {
      for (const configBlock of this.options.configBlocksToMerge) {
        lines.push(`  ${JSON.stringify(configBlock)},`);
      }
    }

    if (lines.length === 1 && this.isCdkProject) {
      const rulesForCdkProject = {
        rules: {
          'sonarjs/constructor-for-side-effects': 'off',
        },
      };

      lines.push(`  ${JSON.stringify(rulesForCdkProject)},`);
    }

    if (lines.length === 1) {
      lines.splice(0, lines.length, lines[0].concat(');'));
    } else {
      lines.push(');');
    }

    return lines;
  }
}
